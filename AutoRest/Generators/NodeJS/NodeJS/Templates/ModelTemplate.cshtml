@using System.Linq
@using System.Collections.Generic
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.NodeJS
@using Microsoft.Rest.Generator.NodeJS.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.NodeJS.ModelTemplateModel>
/*
@Header(" * ")
 */
@EmptyLine
'use strict';
@EmptyLine
@if (Model.ContainsPropertiesInCompositeType() || Model.BaseModelType != null)
{
@:var models = require('./index');
@EmptyLine
}
@if (Model.ContainsPropertiesInSequenceType() || Model.BaseModelType != null)
{
@:var util = require('util');
@EmptyLine
}
@if (Model.ContainsDurationProperty())
{
@:var moment = require('moment');
@EmptyLine
}
/**
 * @@class
 * Initializes a new instance of the @(Model.Name) class.
 * @@constructor
@WrapComment(" * ", Model.Documentation)
@foreach (var property in Model.DocumentationPropertyList)
{
    @ModelTemplateModel.ConstructPropertyDocumentation(
              WrapComment(" * ", "@member {" + ModelTemplateModel.GetPropertyDocumentationType(property)
                                             + "} " + ModelTemplateModel.GetPropertyDocumentationName(property)
                                             + " " + property.Documentation))
}
 */
function @(Model.Name)(parameters) {
@{
  if (Model.BaseModelType != null)
  {
  @:@(Model.Name)['super_'].call(this, parameters);
  }
  var propertyList = new List<Property>(Model.Properties);
  if (propertyList.Count > 0)
  {
  @:if (parameters !== null && parameters !== undefined) {
    for (int i = 0; i < propertyList.Count; i++) 
    {
    @:@(Model.InitializeProperty("this", "parameters", propertyList[i]))
    }
  @:}    
  }
}
}
@EmptyLine
@{
if (Model.BaseModelType != null)
{
@:util.inherits(@(Model.Name), models['@(Model.BaseModelType.Name)']);
}
}
@EmptyLine
@if(Model.SerializableProperties.Any())
{
@:/**
@: * Validate the payload against the @Model.Name schema
@: *
@: * @@param {JSON} payload
@: *
@: */
@:@(Model.Name).prototype.serialize = function () {
{
  if (Model.BaseModelType != null)
  {
  @:var payload = @(Model.Name)['super_'].prototype.serialize.call(this);
  }
  else
  {
  @:var payload = {};
  }
  var serializationPropertyList = new List<Property>(Model.SerializableProperties);
  for (int i = 0; i < serializationPropertyList.Count; i++)
  {
  @:@(Model.SerializeProperty("this", "payload", serializationPropertyList[i]))
  if (i != serializationPropertyList.Count - 1)
  {
  @EmptyLine
  }
  }
  @EmptyLine
  @:return payload;
}
@:};
@EmptyLine

@:/**
@: * Deserialize the instance to @Model.Name schema
@: *
@: * @@param {JSON} instance
@: *
@: */
@:@(Model.Name).prototype.deserialize = function (instance) {
  {
  if (Model.BaseModelType != null)
  {
  @:@(Model.Name)['super_'].prototype.deserialize.call(this, instance);
  }
  var properties = Model.Properties;
  if (properties.Count > 0)
  {
  @:if (instance) {
    var propertiesList = new List<Property>(Model.SerializableProperties);
    for (int i = 0; i < propertiesList.Count; i++)
    {
    @:@(Model.DeserializeProperty("this", "instance", propertiesList[i]))
    if (i != propertiesList.Count - 1)
    {
    @EmptyLine
    }
    }
  @:}
  }
  }
  @EmptyLine
  @:return this;
@:};
}
@EmptyLine
module.exports = @(Model.Name);