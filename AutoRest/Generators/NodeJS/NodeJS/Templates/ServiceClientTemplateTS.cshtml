@using Microsoft.Rest.Generator.NodeJS
@using Microsoft.Rest.Generator.NodeJS.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@using Microsoft.Rest.Generator.NodeJS.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.NodeJS.ServiceClientTemplateModel>
/*
@Header(" * ")
 */
@EmptyLine
import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
@if (Model.MethodTemplateModels.Any())
{
@:import * as models from "./models";
}
@if (Model.MethodGroups.Any()) {
@:import * as operations from "./operations";
}
@EmptyLine
declare class @(Model.Name) {
    @{var parameters = Model.Properties.Where(p => p.IsRequired);}
    /**
     * @@class
     * Initializes a new instance of the @Model.Name class.
     * @@constructor
     *
    @foreach (var param in parameters)
    {
    @: * @@param {@param.Type.Name} @param.Name @param.Documentation
    @: *
    }
     * @@param {string} [baseUri] - The base URI of the service.
     *
     * @@param {object} [options] - The parameter options
     *
     * @@param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @@param {object} [options.requestOptions] - Options for the underlying request object
     * {@@link https://github.com/request/request#requestoptions-callback Options doc}
     *
     * @@param {bool} [options.noRetryPolicy] - If set to true, turn off default retry policy
     */
    constructor(@(Model.RequiredConstructorParametersTS), options: ServiceClientOptions);

    @foreach (var property in Model.Properties)
    {
    @EmptyLine
    @:@(property.Name): @(property.Type.TSType(false));
    }

    @if (Model.MethodGroupModels.Any())
    {
    @EmptyLine
    @:// Operation groups
    foreach (var methodGroup in Model.MethodGroupModels)
    {
    @:@(methodGroup.MethodGroupName): operations.@(methodGroup.MethodGroupType);
    }
    }
    @foreach (var method in Model.MethodTemplateModels)
    {
        @EmptyLine
        @:@(Include(new MethodTemplateTS(), method))
    }
}
@EmptyLine
export = @(Model.Name);
