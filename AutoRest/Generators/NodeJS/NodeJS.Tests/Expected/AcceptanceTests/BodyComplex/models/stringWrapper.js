/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the StringWrapper class.
 * @constructor
 * @member {string} [field]
 * 
 * @member {string} [empty]
 * 
 * @member {string} [null]
 * 
 */
function StringWrapper(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.field !== undefined) {
      this.field = parameters.field;
    }
    if (parameters.empty !== undefined) {
      this.empty = parameters.empty;
    }
    if (parameters.null !== undefined) {
      this.null = parameters.null;
    }
  }    
}


/**
 * Validate the payload against the StringWrapper schema
 *
 * @param {JSON} payload
 *
 */
StringWrapper.prototype.serialize = function () {
  var payload = {};
  if (this['field'] !== null && this['field'] !== undefined) {
    if (typeof this['field'].valueOf() !== 'string') {
      throw new Error('this[\'field\'] must be of type string.');
    }
    payload['field'] = this['field'];
  }

  if (this['empty'] !== null && this['empty'] !== undefined) {
    if (typeof this['empty'].valueOf() !== 'string') {
      throw new Error('this[\'empty\'] must be of type string.');
    }
    payload['empty'] = this['empty'];
  }

  if (this['null'] !== null && this['null'] !== undefined) {
    if (typeof this['null'].valueOf() !== 'string') {
      throw new Error('this[\'null\'] must be of type string.');
    }
    payload['null'] = this['null'];
  }

  return payload;
};

/**
 * Deserialize the instance to StringWrapper schema
 *
 * @param {JSON} instance
 *
 */
StringWrapper.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['field'] !== undefined) {
      this['field'] = instance['field'];
    }

    if (instance['empty'] !== undefined) {
      this['empty'] = instance['empty'];
    }

    if (instance['null'] !== undefined) {
      this['null'] = instance['null'];
    }
  }

  return this;
};

module.exports = StringWrapper;
