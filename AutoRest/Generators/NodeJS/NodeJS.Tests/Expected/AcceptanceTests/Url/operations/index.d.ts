/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Paths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestUrlTestService.
 */
export interface Paths {

    /**
     * Get true Boolean value on path
     *
     * @param {boolean} boolPath true boolean value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBooleanTrue(boolPath: boolean, options: RequestOptions, callback: ServiceCallback<void>): void;
    getBooleanTrue(boolPath: boolean, callback: ServiceCallback<void>): void;

    /**
     * Get false Boolean value on path
     *
     * @param {boolean} boolPath false boolean value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBooleanFalse(boolPath: boolean, options: RequestOptions, callback: ServiceCallback<void>): void;
    getBooleanFalse(boolPath: boolean, callback: ServiceCallback<void>): void;

    /**
     * Get '1000000' integer value
     *
     * @param {number} intPath '1000000' integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIntOneMillion(intPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getIntOneMillion(intPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-1000000' integer value
     *
     * @param {number} intPath '-1000000' integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIntNegativeOneMillion(intPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getIntNegativeOneMillion(intPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '10000000000' 64 bit integer value
     *
     * @param {number} longPath '10000000000' 64 bit integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTenBillion(longPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getTenBillion(longPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-10000000000' 64 bit integer value
     *
     * @param {number} longPath '-10000000000' 64 bit integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNegativeTenBillion(longPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getNegativeTenBillion(longPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '1.034E+20' numeric value
     *
     * @param {number} floatPath '1.034E+20'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    floatScientificPositive(floatPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    floatScientificPositive(floatPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-1.034E-20' numeric value
     *
     * @param {number} floatPath '-1.034E-20'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    floatScientificNegative(floatPath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    floatScientificNegative(floatPath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '9999999.999' numeric value
     *
     * @param {number} doublePath '9999999.999'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    doubleDecimalPositive(doublePath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    doubleDecimalPositive(doublePath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-9999999.999' numeric value
     *
     * @param {number} doublePath '-9999999.999'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    doubleDecimalNegative(doublePath: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    doubleDecimalNegative(doublePath: number, callback: ServiceCallback<void>): void;

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
     *
     * @param {string} stringPath '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. Possible
     * values for this parameter include: '啊齄丂狛狜隣郎隣兀﨩'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringUnicode(stringPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringUnicode(stringPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get 'begin!*'();:@ &=+$,/?#[]end
     *
     * @param {string} stringPath 'begin!*'();:@ &=+$,/?#[]end' url encoded string
     * value. Possible values for this parameter include: 'begin!*'();:@
     * &=+$,/?#[]end'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringUrlEncoded(stringPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringUrlEncoded(stringPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get ''
     *
     * @param {string} stringPath '' string value. Possible values for this
     * parameter include: ''
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringEmpty(stringPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringEmpty(stringPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get null (should throw)
     *
     * @param {string} stringPath null string value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringNull(stringPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringNull(stringPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get using uri with 'green color' in path parameter
     *
     * @param {string} enumPath send the value green. Possible values for this
     * parameter include: 'red color', 'green color', 'blue color'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enumValid(enumPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    enumValid(enumPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get null (should throw on the client before the request is sent on wire)
     *
     * @param {string} enumPath send null should throw. Possible values for this
     * parameter include: 'red color', 'green color', 'blue color'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enumNull(enumPath: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    enumNull(enumPath: string, callback: ServiceCallback<void>): void;

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     *
     * @param {buffer} bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte
     * array
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteMultiByte(bytePath: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteMultiByte(bytePath: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get '' as byte array
     *
     * @param {buffer} bytePath '' as byte array
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteEmpty(bytePath: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteEmpty(bytePath: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get null as byte array (should throw)
     *
     * @param {buffer} bytePath null as byte array (should throw)
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteNull(bytePath: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteNull(bytePath: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get '2012-01-01' as date
     *
     * @param {date} datePath '2012-01-01' as date
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateValid(datePath: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateValid(datePath: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get null as date - this should throw or be unusable on the client side,
     * depending on date representation
     *
     * @param {date} datePath null as date (should throw)
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateNull(datePath: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateNull(datePath: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get '2012-01-01T01:01:01Z' as date-time
     *
     * @param {date} dateTimePath '2012-01-01T01:01:01Z' as date-time
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateTimeValid(dateTimePath: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateTimeValid(dateTimePath: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get null as date-time, should be disallowed or throw depending on
     * representation of date-time
     *
     * @param {date} dateTimePath null as date-time
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateTimeNull(dateTimePath: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateTimeNull(dateTimePath: Date|string, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Queries
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestUrlTestService.
 */
export interface Queries {

    /**
     * Get true Boolean value on path
     *
     * @param {boolean} [boolQuery] true boolean value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBooleanTrue(boolQuery: boolean, options: RequestOptions, callback: ServiceCallback<void>): void;
    getBooleanTrue(boolQuery: boolean, callback: ServiceCallback<void>): void;

    /**
     * Get false Boolean value on path
     *
     * @param {boolean} [boolQuery] false boolean value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBooleanFalse(boolQuery: boolean, options: RequestOptions, callback: ServiceCallback<void>): void;
    getBooleanFalse(boolQuery: boolean, callback: ServiceCallback<void>): void;

    /**
     * Get null Boolean value on query (query string should be absent)
     *
     * @param {boolean} [boolQuery] null boolean value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBooleanNull(boolQuery: boolean, options: RequestOptions, callback: ServiceCallback<void>): void;
    getBooleanNull(boolQuery: boolean, callback: ServiceCallback<void>): void;

    /**
     * Get '1000000' integer value
     *
     * @param {number} [intQuery] '1000000' integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIntOneMillion(intQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getIntOneMillion(intQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-1000000' integer value
     *
     * @param {number} [intQuery] '-1000000' integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIntNegativeOneMillion(intQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getIntNegativeOneMillion(intQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get null integer value (no query parameter)
     *
     * @param {number} [intQuery] null integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIntNull(intQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getIntNull(intQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '10000000000' 64 bit integer value
     *
     * @param {number} [longQuery] '10000000000' 64 bit integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTenBillion(longQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getTenBillion(longQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-10000000000' 64 bit integer value
     *
     * @param {number} [longQuery] '-10000000000' 64 bit integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNegativeTenBillion(longQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getNegativeTenBillion(longQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get 'null 64 bit integer value (no query param in uri)
     *
     * @param {number} [longQuery] null 64 bit integer value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLongNull(longQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    getLongNull(longQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '1.034E+20' numeric value
     *
     * @param {number} [floatQuery] '1.034E+20'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    floatScientificPositive(floatQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    floatScientificPositive(floatQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-1.034E-20' numeric value
     *
     * @param {number} [floatQuery] '-1.034E-20'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    floatScientificNegative(floatQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    floatScientificNegative(floatQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get null numeric value (no query parameter)
     *
     * @param {number} [floatQuery] null numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    floatNull(floatQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    floatNull(floatQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '9999999.999' numeric value
     *
     * @param {number} [doubleQuery] '9999999.999'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    doubleDecimalPositive(doubleQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    doubleDecimalPositive(doubleQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '-9999999.999' numeric value
     *
     * @param {number} [doubleQuery] '-9999999.999'numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    doubleDecimalNegative(doubleQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    doubleDecimalNegative(doubleQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get null numeric value (no query parameter)
     *
     * @param {number} [doubleQuery] null numeric value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    doubleNull(doubleQuery: number, options: RequestOptions, callback: ServiceCallback<void>): void;
    doubleNull(doubleQuery: number, callback: ServiceCallback<void>): void;

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
     *
     * @param {string} [stringQuery] '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. Possible
     * values for this parameter include: '啊齄丂狛狜隣郎隣兀﨩'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringUnicode(stringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringUnicode(stringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get 'begin!*'();:@ &=+$,/?#[]end
     *
     * @param {string} [stringQuery] 'begin!*'();:@ &=+$,/?#[]end' url encoded
     * string value. Possible values for this parameter include: 'begin!*'();:@
     * &=+$,/?#[]end'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringUrlEncoded(stringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringUrlEncoded(stringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get ''
     *
     * @param {string} [stringQuery] '' string value. Possible values for this
     * parameter include: ''
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringEmpty(stringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringEmpty(stringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get null (no query parameter in url)
     *
     * @param {string} [stringQuery] null string value
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stringNull(stringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    stringNull(stringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get using uri with query parameter 'green color'
     *
     * @param {string} [enumQuery] 'green color' enum value. Possible values for
     * this parameter include: 'red color', 'green color', 'blue color'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enumValid(enumQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    enumValid(enumQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get null (no query parameter in url)
     *
     * @param {string} [enumQuery] null string value. Possible values for this
     * parameter include: 'red color', 'green color', 'blue color'
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enumNull(enumQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    enumNull(enumQuery: string, callback: ServiceCallback<void>): void;

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     *
     * @param {buffer} [byteQuery] '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded
     * byte array
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteMultiByte(byteQuery: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteMultiByte(byteQuery: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get '' as byte array
     *
     * @param {buffer} [byteQuery] '' as byte array
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteEmpty(byteQuery: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteEmpty(byteQuery: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get null as byte array (no query parameters in uri)
     *
     * @param {buffer} [byteQuery] null as byte array (no query parameters in uri)
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    byteNull(byteQuery: Buffer, options: RequestOptions, callback: ServiceCallback<void>): void;
    byteNull(byteQuery: Buffer, callback: ServiceCallback<void>): void;

    /**
     * Get '2012-01-01' as date
     *
     * @param {date} [dateQuery] '2012-01-01' as date
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateValid(dateQuery: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateValid(dateQuery: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get null as date - this should result in no query parameters in uri
     *
     * @param {date} [dateQuery] null as date (no query parameters in uri)
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateNull(dateQuery: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateNull(dateQuery: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get '2012-01-01T01:01:01Z' as date-time
     *
     * @param {date} [dateTimeQuery] '2012-01-01T01:01:01Z' as date-time
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateTimeValid(dateTimeQuery: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateTimeValid(dateTimeQuery: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get null as date-time, should result in no query parameters in uri
     *
     * @param {date} [dateTimeQuery] null as date-time (no query parameters)
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    dateTimeNull(dateTimeQuery: Date|string, options: RequestOptions, callback: ServiceCallback<void>): void;
    dateTimeNull(dateTimeQuery: Date|string, callback: ServiceCallback<void>): void;

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
     * null, ''] using the csv-array format
     *
     * @param {array} [arrayQuery] an array of string ['ArrayQuery1',
     * 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringCsvValid(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringCsvValid(arrayQuery: string[], callback: ServiceCallback<void>): void;

    /**
     * Get a null array of string using the csv-array format
     *
     * @param {array} [arrayQuery] a null array of string using the csv-array
     * format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringCsvNull(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringCsvNull(arrayQuery: string[], callback: ServiceCallback<void>): void;

    /**
     * Get an empty array [] of string using the csv-array format
     *
     * @param {array} [arrayQuery] an empty array [] of string using the csv-array
     * format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringCsvEmpty(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringCsvEmpty(arrayQuery: string[], callback: ServiceCallback<void>): void;

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
     * null, ''] using the ssv-array format
     *
     * @param {array} [arrayQuery] an array of string ['ArrayQuery1',
     * 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-array format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringSsvValid(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringSsvValid(arrayQuery: string[], callback: ServiceCallback<void>): void;

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
     * null, ''] using the tsv-array format
     *
     * @param {array} [arrayQuery] an array of string ['ArrayQuery1',
     * 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-array format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringTsvValid(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringTsvValid(arrayQuery: string[], callback: ServiceCallback<void>): void;

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
     * null, ''] using the pipes-array format
     *
     * @param {array} [arrayQuery] an array of string ['ArrayQuery1',
     * 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the pipes-array format
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    arrayStringPipesValid(arrayQuery: string[], options: RequestOptions, callback: ServiceCallback<void>): void;
    arrayStringPipesValid(arrayQuery: string[], callback: ServiceCallback<void>): void;
}

/**
 * @class
 * PathItems
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestUrlTestService.
 */
export interface PathItems {

    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath',
     * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
     * pathItemStringQuery='pathItemStringQuery',
     * localStringQuery='localStringQuery'
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     * 
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     * 
     * @param {string} [localStringQuery] should contain value 'localStringQuery'
     * 
     * @param {string} [pathItemStringQuery] A string value 'pathItemStringQuery'
     * that appears as a query parameter
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllWithValues(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    getAllWithValues(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath',
     * localStringPath='localStringPath', globalStringQuery=null,
     * pathItemStringQuery='pathItemStringQuery',
     * localStringQuery='localStringQuery'
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     * 
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     * 
     * @param {string} [localStringQuery] should contain value 'localStringQuery'
     * 
     * @param {string} [pathItemStringQuery] A string value 'pathItemStringQuery'
     * that appears as a query parameter
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * send globalStringPath=globalStringPath,
     * pathItemStringPath='pathItemStringPath',
     * localStringPath='localStringPath', globalStringQuery=null,
     * pathItemStringQuery='pathItemStringQuery', localStringQuery=null
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     * 
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     * 
     * @param {string} [localStringQuery] should contain null value
     * 
     * @param {string} [pathItemStringQuery] A string value 'pathItemStringQuery'
     * that appears as a query parameter
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, callback: ServiceCallback<void>): void;

    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath',
     * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
     * pathItemStringQuery=null, localStringQuery=null
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     * 
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     * 
     * @param {string} [localStringQuery] should contain value null
     * 
     * @param {string} [pathItemStringQuery] should contain value null
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, options: RequestOptions, callback: ServiceCallback<void>): void;
    getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, localStringQuery: string, pathItemStringQuery: string, callback: ServiceCallback<void>): void;
}
