@using System
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@using Microsoft.Rest.Generator.Ruby.Templates
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Azure.Ruby.AzureMethodTemplateModel>

@if (!Model.IsLongRunningOperation)
{
@:@(Include(new MethodTemplate(), (MethodTemplateModel)Model))
}
else if (Model.HttpMethod == HttpMethod.Post || Model.HttpMethod == HttpMethod.Delete)
{
<text>
#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.LocalParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", "@return [Concurrent::Promise] promise which provides async access to http response.")
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  # Send request
  promise = begin_@(Model.Name)(@(Model.MethodParameterInvocation))
  @EmptyLine

  promise = promise.then do |response|
    # Defining deserialization method.
    deserialize_method = lambda do |parsed_response|
      @(Model.DeserializePollingResponse("parsed_response", Model.ReturnType))
    end

   @EmptyLine
   # Waiting for response.
   @(Model.ClientReference).get_post_or_delete_operation_result(response, nil, deserialize_method)
  end

  @EmptyLine
  promise
end
</text>
}
else
{
<text>
#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.Parameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
#
@WrapComment("# ", "@return [Concurrent::Promise] promise which provides async access to http response.")
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  # Send request
  promise = begin_@(Model.Name)(@(Model.MethodParameterInvocation))
  @EmptyLine

  promise = promise.then do |response|
    # Defining deserialization method.
    deserialize_method = lambda do |parsed_response|
      @(Model.DeserializePollingResponse("parsed_response", Model.ReturnType))
    end

    @EmptyLine
    # Waiting for response.
    @(Model.ClientReference).get_put_operation_result(response, custom_headers, deserialize_method)
  end

  @EmptyLine
  promise
end
</text>
}
