@using System
@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Ruby.MethodTemplateModel>

#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.LocalParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param [{0}] The hash of custom headers need to be applied to HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", string.Format("@return [{0}] Promise object which allows to get HTTP response.", "Concurrent::Promise"))
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  @foreach (var parameter in Model.ParameterTemplateModels)
  {
    if (parameter.IsRequired)
    {
  @:fail ArgumentError, '@parameter.Name is nil' if @(parameter.Name).nil?
  @:
    }
  @:@(parameter.Type.ValidateType(Model.Scope, parameter.Name))
  }

  # Construct URL
  path = "@Model.Url"
  @(Model.BuildUrl("path", "url"))
  @(Model.RemoveDuplicateForwardSlashes("url"))

  @EmptyLine
  connection = Faraday.new(:url => url) do |faraday|
  @foreach (var middelware in Model.FaradeyMiddlewares)
  {
    @:faraday.use @middelware
  }
    faraday.adapter Faraday.default_adapter
  end

  request_headers = Hash.new
  @if (Model.Parameters.Any(p => p.Location == ParameterLocation.Header))
  {
  @EmptyLine
  @:# Set Headers
  @:@(Model.SetDefaultHeaders)
    foreach (var parameter in Model.Parameters.Where(p => p.Location == ParameterLocation.Header))
    {
        if (parameter.SerializedName.ToLower() == "Content-Type".ToLower())
        {
  @:fail RuntimeError, 'Header Content-Type is forbidden to change'
        }
  @:request_headers["@(parameter.SerializedName)"] = @(parameter.Type.ToString(parameter.Name)) unless @(parameter.Type.ToString(parameter.Name)).nil?
    }
  }
  @EmptyLine
  unless custom_headers.nil?
    custom_headers.each do |key, value|
      request_headers[key] = value
    end
  end

@if (Model.RequestBody != null)
  {
  @EmptyLine
  @:# Serialize Request
  @:request_headers['Content-Type'] = '@(Model.ContentType)'
  @:@Model.CreateSerializationString(Model.RequestBody.Name, Model.RequestBody.Type, "request_content")
  }

  @EmptyLine
  # Send Request
  promise = Concurrent::Promise.new do
    connection.@(Model.HttpMethod.ToString().ToLower()) do |request|
      request.headers = request_headers
@if (Model.RequestBody != null)
{
      @:request.body = request_content
}
      @(Model.ClientReference).credentials.sign_request(request) unless @(Model.ClientReference).credentials.nil?
    end
  end

  @EmptyLine
  promise = promise.then do |http_response|
    status_code = http_response.status
    response_content = http_response.body
    unless (@Model.SuccessStatusCodePredicate)
      @if (Model.DefaultResponse != null)
      {
      @:error_model = JSON.load(response_content)
      @:fail @(Model.OperationExceptionTypeString).new(connection, http_response, error_model)
      }
      else
      {
      @:fail @(Model.OperationExceptionTypeString).new(connection, http_response)
      }
    end

    @EmptyLine
    # Create Result
    result = @(Model.OperationResponseReturnTypeString).new(connection, http_response)
    @Model.InitializeResponseBody

    @foreach (var responsePair in Model.Responses.Where(r => r.Value != null && r.Value.IsSerializable()))
    {
    <text>
    # Deserialize Response
    if status_code == @Model.GetStatusCodeReference(responsePair.Key)
      begin
        @(Model.CreateDeserializationString("response_content", responsePair.Value, "result.body"))
      rescue Exception => e
        fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
      end
    end
    </text>
    }

    @if (Model.ReturnType != null && Model.DefaultResponse != null && !Model.Responses.Any() && Model.DefaultResponse.IsSerializable())
    {
    <text>
    begin
      @(Model.CreateDeserializationString("response_content", Model.ReturnType, "result.body"))
    rescue Exception => e
      fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
    end
    </text>
    }

    @EmptyLine
    result
  end

  @EmptyLine
  promise.execute
end
