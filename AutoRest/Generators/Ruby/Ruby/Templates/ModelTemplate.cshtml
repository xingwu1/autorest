@using System
@using System.Linq
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Ruby.ModelTemplateModel>
# encoding: utf-8
@Header("# ")
@EmptyLine
module @(Settings.Namespace)
  module Models
    #
    @WrapComment("# ", string.IsNullOrEmpty(Model.Documentation) ? "Model object." : Model.Documentation)
    #
    class @Model.Name@(Model.GetBaseTypeName())
    @if (Model.Includes.Any())
    {
      @EmptyLine
        foreach (var include in Model.Includes)
        {
      @:include @include
        }
      @EmptyLine
    }

    @foreach (var property in Model.PropertyTemplateModels)
    {
      @:@WrapComment("# ", string.Format("@return {0}{1}", property.Type.GetYardDocumentation(), property.Documentation))
      // @:@(property.IsReadOnly ? "attr_reader" : "attr_accessor") :@property.Name
      @:attr_accessor :@property.Name
      @EmptyLine
      @:
    }

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @{
            bool anythingToValidate = false;
            foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsReadOnly && p.Type.IsNullable()))
            {
                anythingToValidate = true;
        @:fail MsRest::ValidationError, 'property @property.Name is nil' if @@@(property.Name).nil?
            }
            foreach (var property in Model.Properties.Where(p => !(p.Type is PrimaryType)))
            {
                anythingToValidate = true;
        @:@property.Type.ValidateType(Model.Scope, string.Format("@{0}", property.Name))
        @:
            }
            if (!anythingToValidate)
            {
        @:# Nothing to validate
            }
        }
      end

      @EmptyLine
      #
      # Serializes given Model object into Ruby Hash.
      @WrapComment("# ", string.Format("@param {0} {1}", "object", "Model object to serialize."))
      @WrapComment("# ", string.Format("@return [Hash] {0}", "Serialized object in form of Ruby Hash."))
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}
        @foreach (var property in Model.ComposedProperties.OrderByDescending(x => x.IsRequired))
        {
        @EmptyLine
        @:serialized_property = @("object." + property.Name)
        @:@Model.SerializeProperty("serialized_property", property.Type)
        @:output_object['@(property.SerializedName)'] = serialized_property unless serialized_property.nil?
        }

        @if (Model.IsPolymorphic)
        {
        @EmptyLine
        @:output_object['@Model.PolymorphicDiscriminatorProperty'] = object.@Model.PolymorphicDiscriminatorProperty
        }

        @EmptyLine
        output_object
      end

      @EmptyLine
      #
      # Deserializes given Ruby Hash into Model object.
      @WrapComment("# ", string.Format("@param {0} [Hash] {1}", "object", "Ruby Hash object to deserialize."))
      @WrapComment("# ", string.Format("@return [{0}] {1}", Model.Name, "Deserialized object."))
      #
      def self.deserialize_object(object)
        return if object.nil?

        output_object = @(Model.Name).new

        @foreach (var property in Model.ComposedProperties.OrderByDescending(x => x.IsRequired))
        {
        @EmptyLine
        @:deserialized_property = @(string.Format("object['{0}']", property.SerializedName))
        @:@Model.DeserializeProperty("deserialized_property", property.Type)
        @:output_object.@(property.Name) = deserialized_property
        }

        @if (Model.IsPolymorphic)
        {
        @EmptyLine
        @:output_object.@Model.PolymorphicDiscriminatorProperty = object['@Model.PolymorphicDiscriminatorProperty']
        }

        @EmptyLine
        output_object.validate

        @EmptyLine
        output_object
      end

      @if (Model.IsPolymorphic)
      {
      @EmptyLine
      @:def initialize
      @:  @@@Model.PolymorphicDiscriminatorProperty = "@Model.Name.ToLower()"
      @:end
      @EmptyLine
      @:attr_accessor :@Model.PolymorphicDiscriminatorProperty
      }
    end
  end
end
