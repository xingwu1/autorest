@using System.Linq
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.CSharp.TemplateModels
@using Microsoft.Rest.Generator.Utilities
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.Azure.PageTemplateModel>
@Header("// ")
@EmptyLine
namespace @(Settings.Namespace).Models
{
    using System.Collections.Generic;
    using System.Linq;
    using Newtonsoft.Json;
    using Microsoft.Rest.Azure;
@EmptyLine
    /// <summary>
    /// Defines a page in Azure responses.
    /// </summary>
    /// <typeparam name="T">Type of the page content items</typeparam>
    [JsonObject]
    public class @Model.TypeDefinitionName<T> : IPage<T>
    {
         /// <summary>
         /// Gets the link to the next page.
         /// </summary>
         [JsonProperty("@Model.NextLinkName")]
         public string NextPageLink { get; private set; }
@EmptyLine
         [JsonProperty("@Model.ItemName")]
         private IList<T> Items{ get; set; }
@EmptyLine
         /// <summary>
         /// Returns an enumerator that iterates through the collection.
         /// </summary>
         /// <returns>A an enumerator that can be used to iterate through the collection.</returns>
         public IEnumerator<T> GetEnumerator()
         {
              return (Items == null) ? Enumerable.Empty<T>().GetEnumerator() : Items.GetEnumerator();
         }
@EmptyLine
         /// <summary>
         /// Returns an enumerator that iterates through the collection.
         /// </summary>
         /// <returns>A an enumerator that can be used to iterate through the collection.</returns>
         System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
         {
             return GetEnumerator();
         }
    }
}
