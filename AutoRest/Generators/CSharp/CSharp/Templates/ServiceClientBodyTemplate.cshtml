@using System
@using Microsoft.Rest.Generator.CSharp
@using Microsoft.Rest.Generator.CSharp.Templates
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<ServiceClientTemplateModel>


/// <summary>
/// The base URI of the service.
/// </summary>
public Uri BaseUri { get; set; }
@EmptyLine

/// <summary>
/// Gets or sets json serialization settings.
/// </summary>
public JsonSerializerSettings SerializationSettings { get; private set; }
@EmptyLine

/// <summary>
/// Gets or sets json deserialization settings.
/// </summary>
public JsonSerializerSettings DeserializationSettings { get; private set; }        
@EmptyLine
        
@foreach (var property in Model.Properties)
{
@:/// <summary>
@:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
@:/// </summary>
@:public @property.Type @property.Name { get; @(property.IsReadOnly ? "private " : "")set; }
@EmptyLine
}
        
@foreach (var operation in Model.Operations) 
{
@:public virtual I@(operation.MethodGroupType) @(operation.MethodGroupName) { get; private set; }
@EmptyLine
}
       
/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
@(Model.ContainsCredentials ? "protected" : "public") @(Model.Name)(params DelegatingHandler[] handlers) : base(handlers)
{
    this.Initialize();
}
@EmptyLine

/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='rootHandler'>
/// Optional. The http client handler used to handle http transport.
/// </param>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
@(Model.ContainsCredentials ? "protected" : "public") @(Model.Name)(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
{
    this.Initialize();
}
@EmptyLine

/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='baseUri'>
/// Optional. The base URI of the service.
/// </param>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
@(Model.ContainsCredentials ? "protected" : "public") @(Model.Name)(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
{
    if (baseUri == null)
    {
        throw new ArgumentNullException("baseUri");
    }

    this.BaseUri = baseUri;
}
@EmptyLine
        
/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='baseUri'>
/// Optional. The base URI of the service.
/// </param>
/// <param name='rootHandler'>
/// Optional. The http client handler used to handle http transport.
/// </param>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
@(Model.ContainsCredentials ? "protected" : "public") @(Model.Name)(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
{
    if (baseUri == null)
    {
        throw new ArgumentNullException("baseUri");
    }

    this.BaseUri = baseUri;
}
@EmptyLine

@{var parameters = Model.Properties.Where(p => p.IsRequired && p.IsReadOnly);}
@if (parameters.Any())
{
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:public @(Model.Name)(@(Model.RequiredConstructorParameters), params DelegatingHandler[] handlers) : this(handlers)
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.Type == PrimaryType.Credentials)
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine
        
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='rootHandler'>
@:/// Optional. The http client handler used to handle http transport.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:public @(Model.Name)(@(Model.RequiredConstructorParameters), HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.Type == PrimaryType.Credentials)
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:public @(Model.Name)(Uri baseUri, @(Model.RequiredConstructorParameters), params DelegatingHandler[] handlers) : this(handlers)
@:{
@:    if (baseUri == null)
@:    {
@:        throw new ArgumentNullException("baseUri");
@:    }
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
@:    this.BaseUri = baseUri;
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

    @if (param.Type == PrimaryType.Credentials)
    {
        @:if (this.Credentials != null)
        @:{
        @:    this.Credentials.InitializeServiceClient(this);
        @:}
    }
}
@:}
@:@EmptyLine
        
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='rootHandler'>
@:/// Optional. The http client handler used to handle http transport.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:public @(Model.Name)(Uri baseUri, @(Model.RequiredConstructorParameters), HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
@:{
@:    if (baseUri == null)
@:    {
@:        throw new ArgumentNullException("baseUri");
@:    }
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
@:    this.BaseUri = baseUri;
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

    @if (param.Type == PrimaryType.Credentials)
    {
        @:if (this.Credentials != null)
        @:{
        @:    this.Credentials.InitializeServiceClient(this);
        @:}
    }
}
@:}
@:@EmptyLine
}