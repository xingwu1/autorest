@using System.Linq
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.CSharp.TemplateModels
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.ModelTemplateModel>
@Header("// ")
@EmptyLine
namespace @(Settings.Namespace).Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
@foreach (var usingString in Model.Usings) {
@:    using @usingString;
}
@EmptyLine
    /// <summary>
    @WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    /// </summary>
    @if (Model.NeedsPolymorphicConverter)
    {
    @:[JsonObject("@Model.SerializedName")]
    }
    public partial class @Model.Name@(Model.BaseModelType != null ? " : " + Model.BaseModelType.Name : "")
    {
        /// <summary>
        @WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        /// </summary>
        public @(Model.Name)() { }

        @EmptyLine

        /// <summary>
        @WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        /// </summary>
        public @(Model.Name)(@Model.ConstructorParameters)
        {
        @foreach (var property in Model.Properties)
        {
            @:@(property.Name) = @(CodeNamer.CamelCase(property.Name));
        }
        }
        @EmptyLine
        @foreach (var property in Model.PropertyTemplateModels)
        {
        @:/// <summary>
        @:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
        @:/// </summary>
            if (property.Type == PrimaryType.Date)
            {
        @:[JsonConverter(typeof(DateJsonConverter))]
            }
            if (property.Type == PrimaryType.DateTimeRfc1123)
            {
        @:[JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
            }
        @:[JsonProperty(PropertyName = "@property.SerializedName")]
        @:public @property.Type.Name @property.Name { get; @(property.IsReadOnly ? "private " : "")set; }
        @EmptyLine
        @:
        }
@if(@Model.ShouldValidateChain())
{
        @:/// <summary>
        @:/// Validate the object. Throws ArgumentException or ArgumentNullException if validation fails.
        @:/// </summary>
        @:public @Model.MethodQualifier void Validate()
        @:{
            bool anythingToValidate = false;

            if (Model.BaseModelType != null && Model.BaseModelType.ShouldValidateChain())
            {
                anythingToValidate = true;
            @:base.Validate();
            }

            foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsReadOnly))
            {
                anythingToValidate = true;
            @:if (@property.Name == null)
            @:{
                @:throw new ValidationException(ValidationRules.CannotBeNull, "@property.Name");
            @:}
            @:
            }
            foreach (var property in Model.Properties.Where(p => p.Constraints.Any() || !(p.Type is PrimaryType)))
            {
                anythingToValidate = true;
            @:@property.Type.ValidateType(Model.Scope, string.Format("this.{0}", property.Name), property.Constraints)
            @:
            }
            if (!anythingToValidate)
            {
            @://Nothing to validate
            }
        @:}
        }
    }
}
