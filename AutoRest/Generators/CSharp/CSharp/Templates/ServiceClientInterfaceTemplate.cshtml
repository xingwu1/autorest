@using System
@using Microsoft.Rest.Generator.Utilities
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.ServiceClientTemplateModel>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;

@foreach (var usingString in Model.Usings) {
@:    using @usingString;
}
@EmptyLine
    /// <summary>
    @WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    /// </summary>
    public partial interface I@(Model.Name)
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }
        @EmptyLine

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }
        @EmptyLine

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }
        @EmptyLine

        @foreach (var property in Model.Properties)
        {
        @:/// <summary>
        @:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
        @:/// </summary>
        @:@property.Type @property.Name { get;@(property.IsReadOnly ? "" : " set;") }
        @EmptyLine
        }

        @EmptyLine
    @foreach(var operation in Model.Operations)
    {
        @:I@(operation.MethodGroupType) @(operation.MethodGroupName) { get; }
        @EmptyLine
        @:
    }
    @foreach(var method in Model.MethodTemplateModels)
    {
        if (!String.IsNullOrEmpty(method.Description) || !String.IsNullOrEmpty(method.Summary))
        {
        @:/// <summary>
        @:@WrapComment("/// ", String.IsNullOrEmpty(method.Summary) ? method.Description.EscapeXmlComment() : method.Summary.EscapeXmlComment())
        @:/// </summary>
        }
        if (!String.IsNullOrEmpty(method.Description) && !String.IsNullOrEmpty(method.Summary))
        {
        @:@WrapComment("/// ", method.Description.EscapeXmlComment())
        }
        foreach (var parameter in method.LocalParameters)
        {
        @:/// <param name='@parameter.Name'>
        @:@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())
        @:/// </param>
        }
        @:/// <param name='customHeaders'>
        @:/// The headers that will be added to request.
        @:/// </param>
        @:/// <param name='cancellationToken'>
        @:/// The cancellation token.
        @:/// </param>
        @:Task<@(method.OperationResponseReturnTypeString)> @(method.Name)WithHttpMessagesAsync(@(method.GetAsyncMethodParameterDeclaration(true)));
        @EmptyLine
        @:
    }

    }
}
