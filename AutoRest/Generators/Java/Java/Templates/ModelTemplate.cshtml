@using System.Linq
@using System.Collections.Generic
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Java.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.ModelTemplateModel>
/**
@Header(" * ")
 */
@EmptyLine

package @(Settings.Namespace.ToLower()).models;
@EmptyLine

@foreach (var importClass in Model.ImportList)
{
@:import @importClass;
}
@EmptyLine

/**
@WrapComment(" * ", Model.Documentation.EscapeXmlComment() ?? "The " + Model.Name + " model.")
 */
@if (Model.IsPolymorphic)
{
@:@@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@(Model.EvaluatedPolymorphicDiscriminator)")
@:@@JsonTypeName("@(Model.SerializedName)")
var types = Model.SubTypes.ToList();
if (types.Any())
{
@:@@JsonSubTypes({
for (int i = 0; i < types.Count - 1; i++)
{
var type = types[i];
@:    @@JsonSubTypes.Type(name="@(type.SerializedName)", value=@(type.Name).class),
}
@:    @@JsonSubTypes.Type(name="@(types.Last().SerializedName)", value=@(types.Last().Name).class)
@:})
}
}
public class @(Model.Name)@(Model.BaseModelType != null ? " extends " + Model.BaseModelType.Name : "") {
@foreach (var property in Model.Properties)
{
@:    /**
@:    @WrapComment(" * ", property.Documentation.EscapeXmlComment() ?? "The " + property.Name + " property.")
@:     */
var jsonSetting = property.GetJsonProperty();
if (!jsonSetting.IsNullOrEmpty())
{
@:    @@JsonProperty(@(jsonSetting))
}
@:    private @property.Type @property.Name;
@EmptyLine
}

@foreach (var property in Model.Properties)
{
@:    /**
@:     * Get the @property.Name value.
@:     *
@:     * @@return the @property.Name value
@:     */ 
@:    public @property.Type get@(property.Name.ToPascalCase())() {
@:        return this.@(property.Name);
@:    }
@EmptyLine
@:    /**
@:     * Set the @property.Name value.
@:     *
@:     * @@param @property.Name the @property.Name value to set
@:     */
@:    public void set@(property.Name.ToPascalCase())(@property.Type @property.Name) {
@:        this.@(property.Name) = @property.Name;
@:    }
@EmptyLine
}
}