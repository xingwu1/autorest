@using System
@using Microsoft.Rest.Generator.Java
@using Microsoft.Rest.Generator.Java.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.ServiceClientTemplateModel>
/**
@Header(" * ")
 */
@EmptyLine

package @(Settings.Namespace.ToLower());

@EmptyLine
@foreach (var importClass in Model.ImplImports)
{
@:import @importClass;
}
@EmptyLine

/**
 * Initializes a new instance of the @Model.Name class.
 */
public class @(Model.Name)Impl extends ServiceClient implements @Model.Name {
@if (Model.MethodTemplateModels.Any())
{
@:    private @Model.ServiceClientServiceType service;
}
    private String baseUri;
@EmptyLine
    /**
     * Gets the URI used as the base for all cloud service requests.
     * @@return The BaseUri value.
     */
    public String getBaseUri() {
        return this.baseUri;
    }
@foreach (var property in Model.Properties)
{
@EmptyLine
@:    private @(property.Type) @(property.Name.ToCamelCase());
@EmptyLine
@:    /**
@:     * Gets @(property.Documentation)
@:     *
@:     * @@return the @(property.Name) value.
@:     */
@:    public @(property.Type) get@(property.Name.ToPascalCase())() {
@:        return this.@(property.Name.ToCamelCase());
@:    }
if(!property.IsReadOnly)
{
@EmptyLine
@:    /**
@:     * Sets @(property.Documentation)
@:     *
@:     * @@param @(property.Name.ToCamelCase()) the @(property.Name) value.
@:     */
@:    public void set@(property.Name.ToPascalCase())(@(property.Type) @(property.Name.ToCamelCase())) {
@:        this.@(property.Name.ToCamelCase()) = @(property.Name.ToCamelCase());
@:    }
}
}

@foreach (var operation in Model.Operations)
{
@EmptyLine
@:    private @(operation.MethodGroupType) @(operation.MethodGroupName.ToCamelCase());
@EmptyLine
@:    /**
@:     * Gets the @(operation.MethodGroupType) object to access its operations.
@:     * @@return the @(operation.MethodGroupName) value.
@:     */
@:    public @(operation.MethodGroupType) get@(operation.MethodGroupName.ToPascalCase())() {
@:        return this.@(operation.MethodGroupName.ToCamelCase());
@:    }
}
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     */
    public @(Model.Name)Impl() {
        this("@Model.BaseUrl");
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param baseUri the base URI of the host
     */
    public @(Model.Name)Impl(String baseUri) {
        super();
        this.baseUri = baseUri;
        initialize();
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param baseUri the base URI of the host
     * @@param client the {@@link OkHttpClient} client to use for REST calls
     * @@param retrofitBuilder the builder for building up a {@@link Retrofit}
     */
    public @(Model.Name)Impl(String baseUri, OkHttpClient client, Retrofit.Builder retrofitBuilder) {
        super(client, retrofitBuilder);
        this.baseUri = baseUri;
        initialize();
    }
@EmptyLine
    private void initialize() {
    @if (Settings.AddCredentials)
    {
@:        if (this.credentials != null)
@:        {
@:            this.credentials.applyCredentialsFilter(this.client);
@:        }
    }

        Retrofit retrofit = retrofitBuilder.baseUrl(baseUri).build();
@if (Model.MethodTemplateModels.Any())
{
@:        service = retrofit.create(@(Model.ServiceClientServiceType).class);
}
@foreach (var operation in Model.Operations)
{
@:        this.@(operation.MethodGroupName.ToCamelCase()) = new @(operation.MethodGroupType)Impl(retrofit, this);
}
    }
@if (Model.MethodTemplateModels.Any())
{
@EmptyLine
<text>
@foreach (var method in Model.MethodTemplateModels)
    {
    @:@(Include(new MethodTemplate(), method))
    @EmptyLine
    }
</text>
}
}
