buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.bmuschko.nexus'

group = 'com.microsoft.rest'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "../../../../ClientRuntimes/Java/client-runtime/build/repo-snapshots/"}
}

dependencies {
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.microsoft.rest:client-runtime:0.0.1-SNAPSHOT'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'joda-time:joda-time:2.8.2'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'com.google.guava:guava:18.0'
    testCompile 'junit:junit:4.11'
    testCompile 'junit:junit-dep:4.11'
    testCompile 'commons-io:commons-io:2.4'
}

modifyPom {
    setArtifactId 'java-code-gen-tests'
    project {
        name 'Microsoft AutoRest Java Code Generator Tests'
        description 'This is the Basic Acceptance Tests for Java Code Gen.'
        url 'https://github.com/Azure/autorest'

        scm {
            url 'scm:git:https://github.com/Azure/AutoRest'
            connection 'scm:git:git://github.com/Azure/AutoRest.git'
        }

        licenses {
            license {
                name 'The MIT License (MIT)'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'microsoft'
                name 'Microsoft'
            }
        }
    }
}

nexus {
    sign = true
    repositoryUrl = "file://$buildDir/repo"
    snapshotRepositoryUrl = "file://$buildDir/repo-snapshots"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

test {
    reports.getHtml()
    reports.html.destination = file("${projectDir}/../../../../TestResults/JavaCodeGen")
}

task buildRuntime(type: Exec) {
    workingDir "${projectDir}/../../../../ClientRuntimes/Java/client-runtime"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'gradle', 'uploadArchives'
    } else {
        commandLine 'gradle', 'uploadArchives'
    }
}

task npmrestore(type: Exec) {
    workingDir "${projectDir}/../../../TestServer/server"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task installforever(type: Exec, dependsOn: 'npmrestore') {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm', 'install', '-g', 'forever'
    } else {
        commandLine 'npm', 'install', '-g', 'forever'
    }
}

task runserver(type: Exec, dependsOn: 'installforever') {
    workingDir "${projectDir}/../../../TestServer/server"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'forever', 'start', 'startup/www.js'
    } else {
        commandLine 'forever', 'start', 'startup/www.js'
    }
}

task testcoverage(type: JavaExec, dependsOn: 'runserver') {
    main = 'fixtures.report.CoverageReporter'
    classpath = sourceSets.test.runtimeClasspath
}

task stopserver(type: Exec, dependsOn: 'testcoverage') {
    workingDir "${projectDir}/../../../TestServer/server"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'forever', 'stop', 'startup/www.js'
    } else {
        commandLine 'forever', 'stop', 'startup/www.js'
    }
}

tasks.compileJava.dependsOn 'clean'
tasks.test.dependsOn 'runserver'
tasks.test.finalizedBy 'stopserver'