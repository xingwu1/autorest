/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.squareup.okhttp.ResponseBody;
import fixtures.http.models.A;
import fixtures.http.models.B;
import fixtures.http.models.C;
import fixtures.http.models.D;
import fixtures.http.models.Error;
import retrofit.Call;
import retrofit.Response;
import retrofit.Retrofit;

public class MultipleResponsesImpl implements MultipleResponses {
    private MultipleResponsesService service;
    AutoRestHttpInfrastructureTestService client;

    public MultipleResponsesImpl(Retrofit retrofit, AutoRestHttpInfrastructureTestService client) {
        this.service = retrofit.create(MultipleResponsesService.class);
        this.client = client;
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model204NoModelDefaultError200Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model204NoModelDefaultError200Valid();
            return get200Model204NoModelDefaultError200ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model204NoModelDefaultError200Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError200ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError200ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 204 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model204NoModelDefaultError204Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model204NoModelDefaultError204Valid();
            return get200Model204NoModelDefaultError204ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model204NoModelDefaultError204Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError204ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError204ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model204NoModelDefaultError201Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model204NoModelDefaultError201Invalid();
            return get200Model204NoModelDefaultError201InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model204NoModelDefaultError201Invalid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError201InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError201InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 202 response with no payload:
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model204NoModelDefaultError202None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model204NoModelDefaultError202None();
            return get200Model204NoModelDefaultError202NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 202 response with no payload:
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model204NoModelDefaultError202None();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError202NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError202NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model204NoModelDefaultError400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model204NoModelDefaultError400Valid();
            return get200Model204NoModelDefaultError400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model204NoModelDefaultError400Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model201ModelDefaultError200Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model201ModelDefaultError200Valid();
            return get200Model201ModelDefaultError200ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model201ModelDefaultError200Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError200ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model201ModelDefaultError200ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model201ModelDefaultError201Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model201ModelDefaultError201Valid();
            return get200Model201ModelDefaultError201ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model201ModelDefaultError201Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError201ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model201ModelDefaultError201ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200Model201ModelDefaultError400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200Model201ModelDefaultError400Valid();
            return get200Model201ModelDefaultError400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200Model201ModelDefaultError400Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200Model201ModelDefaultError400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError200Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError200Valid();
            return get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError200Valid();
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError201Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError201Valid();
            return get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError201Valid();
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError404Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError404Valid();
            return get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError404Valid();
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError400Valid();
            return get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA201ModelC404ModelDDefaultError400Valid();
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 202 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultError202None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultError202None();
            return get202None204NoneDefaultError202NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 202 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultError202None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError202NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultError202NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 204 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultError204None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultError204None();
            return get202None204NoneDefaultError204NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultError204None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError204NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultError204NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultError400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultError400Valid();
            return get202None204NoneDefaultError400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultError400Valid();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultError400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultNone202Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultNone202Invalid();
            return get202None204NoneDefaultNone202InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultNone202Invalid();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone202InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone202InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 204 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultNone204None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultNone204None();
            return get202None204NoneDefaultNone204NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultNone204None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone204NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone204NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultNone400None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultNone400None();
            return get202None204NoneDefaultNone400NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultNone400None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone400NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> get202None204NoneDefaultNone400Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get202None204NoneDefaultNone400Invalid();
            return get202None204NoneDefaultNone400InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.get202None204NoneDefaultNone400Invalid();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone400InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> getDefaultModelA200Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultModelA200Valid();
            return getDefaultModelA200ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultModelA200Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultModelA200ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> getDefaultModelA200ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> getDefaultModelA200None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultModelA200None();
            return getDefaultModelA200NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultModelA200None();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultModelA200NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> getDefaultModelA200NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> getDefaultModelA400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultModelA400Valid();
            return getDefaultModelA400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultModelA400Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultModelA400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> getDefaultModelA400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> getDefaultModelA400None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultModelA400None();
            return getDefaultModelA400NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultModelA400None();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultModelA400NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> getDefaultModelA400NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> getDefaultNone200Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultNone200Invalid();
            return getDefaultNone200InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultNone200Invalid();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultNone200InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> getDefaultNone200InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> getDefaultNone200None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultNone200None();
            return getDefaultNone200NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultNone200None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultNone200NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> getDefaultNone200NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> getDefaultNone400Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultNone400Invalid();
            return getDefaultNone400InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultNone400Invalid();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultNone400InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> getDefaultNone400InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<Void> getDefaultNone400None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getDefaultNone400None();
            return getDefaultNone400NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        Call<ResponseBody> call = service.getDefaultNone400None();
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getDefaultNone400NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> getDefaultNone400NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA200None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA200None();
            return get200ModelA200NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA200None();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA200NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA200NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA200Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA200Valid();
            return get200ModelA200ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA200Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA200ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA200ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA200Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA200Invalid();
            return get200ModelA200InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA200Invalid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA200InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA200InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA400None() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA400None();
            return get200ModelA400NoneDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA400None();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA400NoneDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA400NoneDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA400Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA400Valid();
            return get200ModelA400ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA400Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA400ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA400ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA400Invalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA400Invalid();
            return get200ModelA400InvalidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA400Invalid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA400InvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA400InvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public ServiceResponse<A> get200ModelA202Valid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.get200ModelA202Valid();
            return get200ModelA202ValidDelegate(call.execute(), null);
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback) {
        Call<ResponseBody> call = service.get200ModelA202Valid();
        call.enqueue(new ServiceResponseCallback<A>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(get200ModelA202ValidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<A> get200ModelA202ValidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, retrofit);
    }

}
