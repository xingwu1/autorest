/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import fixtures.http.models.A;
import retrofit.Call;
import retrofit.http.GET;

/**
 * An instance of this class provides access to all the operations defined
 * in MultipleResponses.
 */
public interface MultipleResponses {
    /**
     * The interface defining all the services for MultipleResponses to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MultipleResponsesService {
        @GET("/http/payloads/200/A/204/none/default/Error/response/200/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError200Valid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/204/none")
        Call<ResponseBody> get200Model204NoModelDefaultError204Valid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/201/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError201Invalid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/202/none")
        Call<ResponseBody> get200Model204NoModelDefaultError202None();

        @GET("/http/payloads/200/A/204/none/default/Error/response/400/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError400Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/200/valid")
        Call<ResponseBody> get200Model201ModelDefaultError200Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/201/valid")
        Call<ResponseBody> get200Model201ModelDefaultError201Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/400/valid")
        Call<ResponseBody> get200Model201ModelDefaultError400Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError200Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError201Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError404Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError400Valid();

        @GET("/http/payloads/202/none/204/none/default/Error/response/202/none")
        Call<ResponseBody> get202None204NoneDefaultError202None();

        @GET("/http/payloads/202/none/204/none/default/Error/response/204/none")
        Call<ResponseBody> get202None204NoneDefaultError204None();

        @GET("/http/payloads/202/none/204/none/default/Error/response/400/valid")
        Call<ResponseBody> get202None204NoneDefaultError400Valid();

        @GET("/http/payloads/202/none/204/none/default/none/response/202/invalid")
        Call<ResponseBody> get202None204NoneDefaultNone202Invalid();

        @GET("/http/payloads/202/none/204/none/default/none/response/204/none")
        Call<ResponseBody> get202None204NoneDefaultNone204None();

        @GET("/http/payloads/202/none/204/none/default/none/response/400/none")
        Call<ResponseBody> get202None204NoneDefaultNone400None();

        @GET("/http/payloads/202/none/204/none/default/none/response/400/invalid")
        Call<ResponseBody> get202None204NoneDefaultNone400Invalid();

        @GET("/http/payloads/default/A/response/200/valid")
        Call<ResponseBody> getDefaultModelA200Valid();

        @GET("/http/payloads/default/A/response/200/none")
        Call<ResponseBody> getDefaultModelA200None();

        @GET("/http/payloads/default/A/response/400/valid")
        Call<ResponseBody> getDefaultModelA400Valid();

        @GET("/http/payloads/default/A/response/400/none")
        Call<ResponseBody> getDefaultModelA400None();

        @GET("/http/payloads/default/none/response/200/invalid")
        Call<ResponseBody> getDefaultNone200Invalid();

        @GET("/http/payloads/default/none/response/200/none")
        Call<ResponseBody> getDefaultNone200None();

        @GET("/http/payloads/default/none/response/400/invalid")
        Call<ResponseBody> getDefaultNone400Invalid();

        @GET("/http/payloads/default/none/response/400/none")
        Call<ResponseBody> getDefaultNone400None();

        @GET("/http/payloads/200/A/response/200/none")
        Call<ResponseBody> get200ModelA200None();

        @GET("/http/payloads/200/A/response/200/valid")
        Call<ResponseBody> get200ModelA200Valid();

        @GET("/http/payloads/200/A/response/200/invalid")
        Call<ResponseBody> get200ModelA200Invalid();

        @GET("/http/payloads/200/A/response/400/none")
        Call<ResponseBody> get200ModelA400None();

        @GET("/http/payloads/200/A/response/400/valid")
        Call<ResponseBody> get200ModelA400Valid();

        @GET("/http/payloads/200/A/response/400/invalid")
        Call<ResponseBody> get200ModelA400Invalid();

        @GET("/http/payloads/200/A/response/202/valid")
        Call<ResponseBody> get200ModelA202Valid();

    }
    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model204NoModelDefaultError200Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 204 response with no payload
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model204NoModelDefaultError204Valid() throws ServiceException;

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model204NoModelDefaultError201Invalid() throws ServiceException;

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 202 response with no payload:
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model204NoModelDefaultError202None() throws ServiceException;

    /**
     * Send a 202 response with no payload:
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model204NoModelDefaultError400Valid() throws ServiceException;

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model201ModelDefaultError200Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model201ModelDefaultError201Valid() throws ServiceException;

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200Model201ModelDefaultError400Valid() throws ServiceException;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError200Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError201Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError404Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError400Valid() throws ServiceException;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Send a 202 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultError202None() throws ServiceException;

    /**
     * Send a 202 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 204 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultError204None() throws ServiceException;

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultError400Valid() throws ServiceException;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultNone202Invalid() throws ServiceException;

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 204 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultNone204None() throws ServiceException;

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 400 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultNone400None() throws ServiceException;

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get202None204NoneDefaultNone400Invalid() throws ServiceException;

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> getDefaultModelA200Valid() throws ServiceException;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with no payload
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> getDefaultModelA200None() throws ServiceException;

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> getDefaultModelA400Valid() throws ServiceException;

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 400 response with no payload
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> getDefaultModelA400None() throws ServiceException;

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> getDefaultNone200Invalid() throws ServiceException;

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 200 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> getDefaultNone200None() throws ServiceException;

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> getDefaultNone400Invalid() throws ServiceException;

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 400 response with no payload
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> getDefaultNone400None() throws ServiceException;

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA200None() throws ServiceException;

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA200Valid() throws ServiceException;

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA200Invalid() throws ServiceException;

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA400None() throws ServiceException;

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA400Valid() throws ServiceException;

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA400Invalid() throws ServiceException;

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @return the A object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<A> get200ModelA202Valid() throws ServiceException;

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback);

}
