/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.HEAD;
import retrofit.http.HTTP;
import retrofit.http.PATCH;
import retrofit.http.POST;
import retrofit.http.PUT;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpRetry.
 */
public interface HttpRetry {
    /**
     * The interface defining all the services for HttpRetry to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpRetryService {
        @HEAD("/http/retry/408")
        Call<Void> head408();

        @PUT("/http/retry/500")
        Call<ResponseBody> put500(@Body Boolean booleanValue);

        @PATCH("/http/retry/500")
        Call<ResponseBody> patch500(@Body Boolean booleanValue);

        @GET("/http/retry/502")
        Call<ResponseBody> get502();

        @POST("/http/retry/503")
        Call<ResponseBody> post503(@Body Boolean booleanValue);

        @HTTP(path = "/http/retry/503", method = "DELETE", hasBody = true)
        Call<ResponseBody> delete503(@Body Boolean booleanValue);

        @PUT("/http/retry/504")
        Call<ResponseBody> put504(@Body Boolean booleanValue);

        @PATCH("/http/retry/504")
        Call<ResponseBody> patch504(@Body Boolean booleanValue);

    }
    /**
     * Return 408 status code, then 200 after retry
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> head408() throws ServiceException;

    /**
     * Return 408 status code, then 200 after retry
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<Void> head408Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> put500(Boolean booleanValue) throws ServiceException;

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> put500Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> patch500(Boolean booleanValue) throws ServiceException;

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> patch500Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 502 status code, then 200 after retry
     *
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> get502() throws ServiceException;

    /**
     * Return 502 status code, then 200 after retry
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> get502Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> post503(Boolean booleanValue) throws ServiceException;

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> post503Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> delete503(Boolean booleanValue) throws ServiceException;

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> delete503Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> put504(Boolean booleanValue) throws ServiceException;

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> put504Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> patch504(Boolean booleanValue) throws ServiceException;

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> patch504Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

}
