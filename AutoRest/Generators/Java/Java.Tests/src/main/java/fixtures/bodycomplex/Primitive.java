/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import fixtures.bodycomplex.models.Datetimerfc1123Wrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.DurationWrapper;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.PUT;

/**
 * An instance of this class provides access to all the operations defined
 * in Primitive.
 */
public interface Primitive {
    /**
     * The interface defining all the services for Primitive to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PrimitiveService {
        @GET("/complex/primitive/integer")
        Call<ResponseBody> getInt();

        @PUT("/complex/primitive/integer")
        Call<ResponseBody> putInt(@Body IntWrapper complexBody);

        @GET("/complex/primitive/long")
        Call<ResponseBody> getLong();

        @PUT("/complex/primitive/long")
        Call<ResponseBody> putLong(@Body LongWrapper complexBody);

        @GET("/complex/primitive/float")
        Call<ResponseBody> getFloat();

        @PUT("/complex/primitive/float")
        Call<ResponseBody> putFloat(@Body FloatWrapper complexBody);

        @GET("/complex/primitive/double")
        Call<ResponseBody> getDouble();

        @PUT("/complex/primitive/double")
        Call<ResponseBody> putDouble(@Body DoubleWrapper complexBody);

        @GET("/complex/primitive/bool")
        Call<ResponseBody> getBool();

        @PUT("/complex/primitive/bool")
        Call<ResponseBody> putBool(@Body BooleanWrapper complexBody);

        @GET("/complex/primitive/string")
        Call<ResponseBody> getString();

        @PUT("/complex/primitive/string")
        Call<ResponseBody> putString(@Body StringWrapper complexBody);

        @GET("/complex/primitive/date")
        Call<ResponseBody> getDate();

        @PUT("/complex/primitive/date")
        Call<ResponseBody> putDate(@Body DateWrapper complexBody);

        @GET("/complex/primitive/datetime")
        Call<ResponseBody> getDateTime();

        @PUT("/complex/primitive/datetime")
        Call<ResponseBody> putDateTime(@Body DatetimeWrapper complexBody);

        @GET("/complex/primitive/datetimerfc1123")
        Call<ResponseBody> getDateTimeRfc1123();

        @PUT("/complex/primitive/datetimerfc1123")
        Call<ResponseBody> putDateTimeRfc1123(@Body Datetimerfc1123Wrapper complexBody);

        @GET("/complex/primitive/duration")
        Call<ResponseBody> getDuration();

        @PUT("/complex/primitive/duration")
        Call<ResponseBody> putDuration(@Body DurationWrapper complexBody);

        @GET("/complex/primitive/byte")
        Call<ResponseBody> getByte();

        @PUT("/complex/primitive/byte")
        Call<ResponseBody> putByte(@Body ByteWrapper complexBody);

    }
    /**
     * Get complex types with integer properties
     *
     * @return the IntWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<IntWrapper> getInt() throws ServiceException;

    /**
     * Get complex types with integer properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getIntAsync(final ServiceCallback<IntWrapper> serviceCallback);

    /**
     * Put complex types with integer properties
     *
     * @param complexBody Please put -1 and 2
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putInt(IntWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with integer properties
     *
     * @param complexBody Please put -1 and 2
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putIntAsync(IntWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with long properties
     *
     * @return the LongWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<LongWrapper> getLong() throws ServiceException;

    /**
     * Get complex types with long properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getLongAsync(final ServiceCallback<LongWrapper> serviceCallback);

    /**
     * Put complex types with long properties
     *
     * @param complexBody Please put 1099511627775 and -999511627788
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putLong(LongWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with long properties
     *
     * @param complexBody Please put 1099511627775 and -999511627788
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putLongAsync(LongWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with float properties
     *
     * @return the FloatWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<FloatWrapper> getFloat() throws ServiceException;

    /**
     * Get complex types with float properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getFloatAsync(final ServiceCallback<FloatWrapper> serviceCallback);

    /**
     * Put complex types with float properties
     *
     * @param complexBody Please put 1.05 and -0.003
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putFloat(FloatWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with float properties
     *
     * @param complexBody Please put 1.05 and -0.003
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putFloatAsync(FloatWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with double properties
     *
     * @return the DoubleWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<DoubleWrapper> getDouble() throws ServiceException;

    /**
     * Get complex types with double properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDoubleAsync(final ServiceCallback<DoubleWrapper> serviceCallback);

    /**
     * Put complex types with double properties
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDouble(DoubleWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with double properties
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDoubleAsync(DoubleWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with bool properties
     *
     * @return the BooleanWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<BooleanWrapper> getBool() throws ServiceException;

    /**
     * Get complex types with bool properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getBoolAsync(final ServiceCallback<BooleanWrapper> serviceCallback);

    /**
     * Put complex types with bool properties
     *
     * @param complexBody Please put true and false
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putBool(BooleanWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with bool properties
     *
     * @param complexBody Please put true and false
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putBoolAsync(BooleanWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with string properties
     *
     * @return the StringWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<StringWrapper> getString() throws ServiceException;

    /**
     * Get complex types with string properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getStringAsync(final ServiceCallback<StringWrapper> serviceCallback);

    /**
     * Put complex types with string properties
     *
     * @param complexBody Please put 'goodrequest', '', and null
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putString(StringWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with string properties
     *
     * @param complexBody Please put 'goodrequest', '', and null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putStringAsync(StringWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with date properties
     *
     * @return the DateWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<DateWrapper> getDate() throws ServiceException;

    /**
     * Get complex types with date properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateAsync(final ServiceCallback<DateWrapper> serviceCallback);

    /**
     * Put complex types with date properties
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDate(DateWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with date properties
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateAsync(DateWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with datetime properties
     *
     * @return the DatetimeWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<DatetimeWrapper> getDateTime() throws ServiceException;

    /**
     * Get complex types with datetime properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeAsync(final ServiceCallback<DatetimeWrapper> serviceCallback);

    /**
     * Put complex types with datetime properties
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDateTime(DatetimeWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with datetime properties
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateTimeAsync(DatetimeWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with datetimeRfc1123 properties
     *
     * @return the Datetimerfc1123Wrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Datetimerfc1123Wrapper> getDateTimeRfc1123() throws ServiceException;

    /**
     * Get complex types with datetimeRfc1123 properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeRfc1123Async(final ServiceCallback<Datetimerfc1123Wrapper> serviceCallback);

    /**
     * Put complex types with datetimeRfc1123 properties
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDateTimeRfc1123(Datetimerfc1123Wrapper complexBody) throws ServiceException;

    /**
     * Put complex types with datetimeRfc1123 properties
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateTimeRfc1123Async(Datetimerfc1123Wrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with duration properties
     *
     * @return the DurationWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<DurationWrapper> getDuration() throws ServiceException;

    /**
     * Get complex types with duration properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDurationAsync(final ServiceCallback<DurationWrapper> serviceCallback);

    /**
     * Put complex types with duration properties
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDuration(DurationWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with duration properties
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDurationAsync(DurationWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with byte properties
     *
     * @return the ByteWrapper object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<ByteWrapper> getByte() throws ServiceException;

    /**
     * Get complex types with byte properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getByteAsync(final ServiceCallback<ByteWrapper> serviceCallback);

    /**
     * Put complex types with byte properties
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putByte(ByteWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with byte properties
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putByteAsync(ByteWrapper complexBody, final ServiceCallback<Void> serviceCallback);

}
