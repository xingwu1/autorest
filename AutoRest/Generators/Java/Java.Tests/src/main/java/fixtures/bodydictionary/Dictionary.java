/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydictionary;

import com.microsoft.rest.DateTimeRfc1123;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import fixtures.bodydictionary.models.Widget;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.PUT;

/**
 * An instance of this class provides access to all the operations defined
 * in Dictionary.
 */
public interface Dictionary {
    /**
     * The interface defining all the services for Dictionary to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DictionaryService {
        @GET("/dictionary/null")
        Call<ResponseBody> getNull();

        @GET("/dictionary/empty")
        Call<ResponseBody> getEmpty();

        @PUT("/dictionary/empty")
        Call<ResponseBody> putEmpty(@Body Map<String, String> arrayBody);

        @GET("/dictionary/nullvalue")
        Call<ResponseBody> getNullValue();

        @GET("/dictionary/nullkey")
        Call<ResponseBody> getNullKey();

        @GET("/dictionary/keyemptystring")
        Call<ResponseBody> getEmptyStringKey();

        @GET("/dictionary/invalid")
        Call<ResponseBody> getInvalid();

        @GET("/dictionary/prim/boolean/tfft")
        Call<ResponseBody> getBooleanTfft();

        @PUT("/dictionary/prim/boolean/tfft")
        Call<ResponseBody> putBooleanTfft(@Body Map<String, Boolean> arrayBody);

        @GET("/dictionary/prim/boolean/true.null.false")
        Call<ResponseBody> getBooleanInvalidNull();

        @GET("/dictionary/prim/boolean/true.boolean.false")
        Call<ResponseBody> getBooleanInvalidString();

        @GET("/dictionary/prim/integer/1.-1.3.300")
        Call<ResponseBody> getIntegerValid();

        @PUT("/dictionary/prim/integer/1.-1.3.300")
        Call<ResponseBody> putIntegerValid(@Body Map<String, Integer> arrayBody);

        @GET("/dictionary/prim/integer/1.null.zero")
        Call<ResponseBody> getIntInvalidNull();

        @GET("/dictionary/prim/integer/1.integer.0")
        Call<ResponseBody> getIntInvalidString();

        @GET("/dictionary/prim/long/1.-1.3.300")
        Call<ResponseBody> getLongValid();

        @PUT("/dictionary/prim/long/1.-1.3.300")
        Call<ResponseBody> putLongValid(@Body Map<String, Long> arrayBody);

        @GET("/dictionary/prim/long/1.null.zero")
        Call<ResponseBody> getLongInvalidNull();

        @GET("/dictionary/prim/long/1.integer.0")
        Call<ResponseBody> getLongInvalidString();

        @GET("/dictionary/prim/float/0--0.01-1.2e20")
        Call<ResponseBody> getFloatValid();

        @PUT("/dictionary/prim/float/0--0.01-1.2e20")
        Call<ResponseBody> putFloatValid(@Body Map<String, Double> arrayBody);

        @GET("/dictionary/prim/float/0.0-null-1.2e20")
        Call<ResponseBody> getFloatInvalidNull();

        @GET("/dictionary/prim/float/1.number.0")
        Call<ResponseBody> getFloatInvalidString();

        @GET("/dictionary/prim/double/0--0.01-1.2e20")
        Call<ResponseBody> getDoubleValid();

        @PUT("/dictionary/prim/double/0--0.01-1.2e20")
        Call<ResponseBody> putDoubleValid(@Body Map<String, Double> arrayBody);

        @GET("/dictionary/prim/double/0.0-null-1.2e20")
        Call<ResponseBody> getDoubleInvalidNull();

        @GET("/dictionary/prim/double/1.number.0")
        Call<ResponseBody> getDoubleInvalidString();

        @GET("/dictionary/prim/string/foo1.foo2.foo3")
        Call<ResponseBody> getStringValid();

        @PUT("/dictionary/prim/string/foo1.foo2.foo3")
        Call<ResponseBody> putStringValid(@Body Map<String, String> arrayBody);

        @GET("/dictionary/prim/string/foo.null.foo2")
        Call<ResponseBody> getStringWithNull();

        @GET("/dictionary/prim/string/foo.123.foo2")
        Call<ResponseBody> getStringWithInvalid();

        @GET("/dictionary/prim/date/valid")
        Call<ResponseBody> getDateValid();

        @PUT("/dictionary/prim/date/valid")
        Call<ResponseBody> putDateValid(@Body Map<String, LocalDate> arrayBody);

        @GET("/dictionary/prim/date/invalidnull")
        Call<ResponseBody> getDateInvalidNull();

        @GET("/dictionary/prim/date/invalidchars")
        Call<ResponseBody> getDateInvalidChars();

        @GET("/dictionary/prim/date-time/valid")
        Call<ResponseBody> getDateTimeValid();

        @PUT("/dictionary/prim/date-time/valid")
        Call<ResponseBody> putDateTimeValid(@Body Map<String, DateTime> arrayBody);

        @GET("/dictionary/prim/date-time/invalidnull")
        Call<ResponseBody> getDateTimeInvalidNull();

        @GET("/dictionary/prim/date-time/invalidchars")
        Call<ResponseBody> getDateTimeInvalidChars();

        @GET("/dictionary/prim/date-time-rfc1123/valid")
        Call<ResponseBody> getDateTimeRfc1123Valid();

        @PUT("/dictionary/prim/date-time-rfc1123/valid")
        Call<ResponseBody> putDateTimeRfc1123Valid(@Body Map<String, DateTimeRfc1123> arrayBody);

        @GET("/dictionary/prim/duration/valid")
        Call<ResponseBody> getDurationValid();

        @PUT("/dictionary/prim/duration/valid")
        Call<ResponseBody> putDurationValid(@Body Map<String, Period> arrayBody);

        @GET("/dictionary/prim/byte/valid")
        Call<ResponseBody> getByteValid();

        @PUT("/dictionary/prim/byte/valid")
        Call<ResponseBody> putByteValid(@Body Map<String, byte[]> arrayBody);

        @GET("/dictionary/prim/byte/invalidnull")
        Call<ResponseBody> getByteInvalidNull();

        @GET("/dictionary/complex/null")
        Call<ResponseBody> getComplexNull();

        @GET("/dictionary/complex/empty")
        Call<ResponseBody> getComplexEmpty();

        @GET("/dictionary/complex/itemnull")
        Call<ResponseBody> getComplexItemNull();

        @GET("/dictionary/complex/itemempty")
        Call<ResponseBody> getComplexItemEmpty();

        @GET("/dictionary/complex/valid")
        Call<ResponseBody> getComplexValid();

        @PUT("/dictionary/complex/valid")
        Call<ResponseBody> putComplexValid(@Body Map<String, Widget> arrayBody);

        @GET("/dictionary/array/null")
        Call<ResponseBody> getArrayNull();

        @GET("/dictionary/array/empty")
        Call<ResponseBody> getArrayEmpty();

        @GET("/dictionary/array/itemnull")
        Call<ResponseBody> getArrayItemNull();

        @GET("/dictionary/array/itemempty")
        Call<ResponseBody> getArrayItemEmpty();

        @GET("/dictionary/array/valid")
        Call<ResponseBody> getArrayValid();

        @PUT("/dictionary/array/valid")
        Call<ResponseBody> putArrayValid(@Body Map<String, List<String>> arrayBody);

        @GET("/dictionary/dictionary/null")
        Call<ResponseBody> getDictionaryNull();

        @GET("/dictionary/dictionary/empty")
        Call<ResponseBody> getDictionaryEmpty();

        @GET("/dictionary/dictionary/itemnull")
        Call<ResponseBody> getDictionaryItemNull();

        @GET("/dictionary/dictionary/itemempty")
        Call<ResponseBody> getDictionaryItemEmpty();

        @GET("/dictionary/dictionary/valid")
        Call<ResponseBody> getDictionaryValid();

        @PUT("/dictionary/dictionary/valid")
        Call<ResponseBody> putDictionaryValid(@Body Map<String, Map<String, String>> arrayBody);

    }
    /**
     * Get null dictionary value
     *
     * @return the Map&lt;String, Integer&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Integer>> getNull() throws ServiceException;

    /**
     * Get null dictionary value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getNullAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get empty dictionary value {}
     *
     * @return the Map&lt;String, Integer&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Integer>> getEmpty() throws ServiceException;

    /**
     * Get empty dictionary value {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getEmptyAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Set dictionary value empty {}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putEmpty(Map<String, String> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putEmptyAsync(Map<String, String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get Dictionary with null value
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getNullValue() throws ServiceException;

    /**
     * Get Dictionary with null value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getNullValueAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get Dictionary with null key
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getNullKey() throws ServiceException;

    /**
     * Get Dictionary with null key
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getNullKeyAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get Dictionary with key as empty string
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getEmptyStringKey() throws ServiceException;

    /**
     * Get Dictionary with key as empty string
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getEmptyStringKeyAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get invalid Dictionary value
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getInvalid() throws ServiceException;

    /**
     * Get invalid Dictionary value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getInvalidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
     *
     * @return the Map&lt;String, Boolean&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Boolean>> getBooleanTfft() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getBooleanTfftAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putBooleanTfft(Map<String, Boolean> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putBooleanTfftAsync(Map<String, Boolean> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }
     *
     * @return the Map&lt;String, Boolean&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Boolean>> getBooleanInvalidNull() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getBooleanInvalidNullAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
     *
     * @return the Map&lt;String, Boolean&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Boolean>> getBooleanInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getBooleanInvalidStringAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @return the Map&lt;String, Integer&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Integer>> getIntegerValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getIntegerValidAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putIntegerValid(Map<String, Integer> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putIntegerValidAsync(Map<String, Integer> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @return the Map&lt;String, Integer&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Integer>> getIntInvalidNull() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getIntInvalidNullAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @return the Map&lt;String, Integer&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Integer>> getIntInvalidString() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getIntInvalidStringAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @return the Map&lt;String, Long&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Long>> getLongValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getLongValidAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Long&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putLongValid(Map<String, Long> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Long&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putLongValidAsync(Map<String, Long> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @return the Map&lt;String, Long&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Long>> getLongInvalidNull() throws ServiceException;

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getLongInvalidNullAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @return the Map&lt;String, Long&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Long>> getLongInvalidString() throws ServiceException;

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getLongInvalidStringAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getFloatValid() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getFloatValidAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putFloatValid(Map<String, Double> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putFloatValidAsync(Map<String, Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getFloatInvalidNull() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getFloatInvalidNullAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getFloatInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getFloatInvalidStringAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getDoubleValid() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDoubleValidAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDoubleValid(Map<String, Double> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDoubleValidAsync(Map<String, Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getDoubleInvalidNull() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDoubleInvalidNullAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @return the Map&lt;String, Double&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Double>> getDoubleInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDoubleInvalidStringAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getStringValid() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getStringValidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putStringValid(Map<String, String> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putStringValidAsync(Map<String, String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getStringWithNull() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getStringWithNullAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
     *
     * @return the Map&lt;String, String&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, String>> getStringWithInvalid() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getStringWithInvalidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @return the Map&lt;String, LocalDate&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, LocalDate>> getDateValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateValidAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDateValid(Map<String, LocalDate> arrayBody) throws ServiceException;

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateValidAsync(Map<String, LocalDate> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
     *
     * @return the Map&lt;String, LocalDate&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, LocalDate>> getDateInvalidNull() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateInvalidNullAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}
     *
     * @return the Map&lt;String, LocalDate&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, LocalDate>> getDateInvalidChars() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateInvalidCharsAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @return the Map&lt;String, DateTime&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, DateTime>> getDateTimeValid() throws ServiceException;

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeValidAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param arrayBody the Map&lt;String, DateTime&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDateTimeValid(Map<String, DateTime> arrayBody) throws ServiceException;

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param arrayBody the Map&lt;String, DateTime&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateTimeValidAsync(Map<String, DateTime> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
     *
     * @return the Map&lt;String, DateTime&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, DateTime>> getDateTimeInvalidNull() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeInvalidNullAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
     *
     * @return the Map&lt;String, DateTime&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, DateTime>> getDateTimeInvalidChars() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeInvalidCharsAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
     *
     * @return the Map&lt;String, DateTimeRfc1123&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, DateTimeRfc1123>> getDateTimeRfc1123Valid() throws ServiceException;

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDateTimeRfc1123ValidAsync(final ServiceCallback<Map<String, DateTimeRfc1123>> serviceCallback);

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
     *
     * @param arrayBody the Map&lt;String, DateTimeRfc1123&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDateTimeRfc1123Valid(Map<String, DateTimeRfc1123> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
     *
     * @param arrayBody the Map&lt;String, DateTimeRfc1123&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDateTimeRfc1123ValidAsync(Map<String, DateTimeRfc1123> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
     *
     * @return the Map&lt;String, Period&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Period>> getDurationValid() throws ServiceException;

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDurationValidAsync(final ServiceCallback<Map<String, Period>> serviceCallback);

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
     *
     * @param arrayBody the Map&lt;String, Period&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDurationValid(Map<String, Period> arrayBody) throws ServiceException;

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
     *
     * @param arrayBody the Map&lt;String, Period&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDurationValidAsync(Map<String, Period> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
     *
     * @return the Map&lt;String, byte[]&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, byte[]>> getByteValid() throws ServiceException;

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getByteValidAsync(final ServiceCallback<Map<String, byte[]>> serviceCallback);

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putByteValid(Map<String, byte[]> arrayBody) throws ServiceException;

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putByteValidAsync(Map<String, byte[]> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
     *
     * @return the Map&lt;String, byte[]&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, byte[]>> getByteInvalidNull() throws ServiceException;

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getByteInvalidNullAsync(final ServiceCallback<Map<String, byte[]>> serviceCallback);

    /**
     * Get dictionary of complex type null value
     *
     * @return the Map&lt;String, Widget&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Widget>> getComplexNull() throws ServiceException;

    /**
     * Get dictionary of complex type null value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getComplexNullAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get empty dictionary of complex type {}
     *
     * @return the Map&lt;String, Widget&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Widget>> getComplexEmpty() throws ServiceException;

    /**
     * Get empty dictionary of complex type {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getComplexEmptyAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Widget>> getComplexItemNull() throws ServiceException;

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getComplexItemNullAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Widget>> getComplexItemEmpty() throws ServiceException;

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getComplexItemEmptyAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Widget>> getComplexValid() throws ServiceException;

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getComplexValidAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putComplexValid(Map<String, Widget> arrayBody) throws ServiceException;

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putComplexValidAsync(Map<String, Widget> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get a null array
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, List<String>>> getArrayNull() throws ServiceException;

    /**
     * Get a null array
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getArrayNullAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an empty dictionary {}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, List<String>>> getArrayEmpty() throws ServiceException;

    /**
     * Get an empty dictionary {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getArrayEmptyAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, List<String>>> getArrayItemNull() throws ServiceException;

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getArrayItemNullAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, List<String>>> getArrayItemEmpty() throws ServiceException;

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getArrayItemEmptyAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, List<String>>> getArrayValid() throws ServiceException;

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getArrayValidAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putArrayValid(Map<String, List<String>> arrayBody) throws ServiceException;

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putArrayValidAsync(Map<String, List<String>> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an dictionaries of dictionaries with value null
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Map<String, String>>> getDictionaryNull() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries with value null
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDictionaryNullAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Map<String, String>>> getDictionaryEmpty() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDictionaryEmptyAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Map<String, String>>> getDictionaryItemNull() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDictionaryItemNullAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Map<String, String>>> getDictionaryItemEmpty() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDictionaryItemEmptyAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object wrapped in {@link ServiceResponse} if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Map<String, Map<String, String>>> getDictionaryValid() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getDictionaryValidAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value
     * @return the {@link ServiceResponse} object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ServiceResponse<Void> putDictionaryValid(Map<String, Map<String, String>> arrayBody) throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putDictionaryValidAsync(Map<String, Map<String, String>> arrayBody, final ServiceCallback<Void> serviceCallback);

}
